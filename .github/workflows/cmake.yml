name: CMake

on:
  push:
    branches: 
      - "main"
      - 'fileSystemTest'
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake threadClass
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cd ${{github.workspace}}/threadClass && cmake -B ${{github.workspace}}/threadClass/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build threadClass
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/threadClass/build --config ${{env.BUILD_TYPE}}

    - name: Configure CMake filesystem
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cd ${{github.workspace}}/filesystem && cmake -B ${{github.workspace}}/filesystem/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build filesystem
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/filesystem/build --config ${{env.BUILD_TYPE}}

    - name: Configure CMake future
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cd ${{github.workspace}}/future && cmake -B ${{github.workspace}}/future/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build future
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/future/build --config ${{env.BUILD_TYPE}}

    - name: Configure CMake thread
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cd ${{github.workspace}}/thread && cmake -B ${{github.workspace}}/thread/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build thread
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/thread/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/filesystem/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
