cmake_minimum_required(VERSION 3.0.2)

project(ModernCppChallenge)

set(CMAKE_CXX_FLAGS "-std=c++17")
set(THREADS_PREFER_PTHREAD_FLAG ON)
set(LIBS_PATH "${CMAKE_SOURCE_DIR}/The-Modern-Cpp-Challenge/libs")
set(INCLUDE_PATH "${CMAKE_SOURCE_DIR}/The-Modern-Cpp-Challenge/include")

include_directories(${LIBS_PATH}/stduuid)#38
include_directories(${LIBS_PATH}/date/include/date)#40
include_directories(${LIBS_PATH}/pugixml)
include_directories(${LIBS_PATH}/nlohmannjson)
include_directories(${LIBS_PATH}/cryptopp)
include_directories(${LIBS_PATH}/sqlite)
include_directories(${LIBS_PATH}/sqlite_modern_cpp)
include_directories(${LIBS_PATH}/asio/include)

add_definitions(-DCRYPTOPP_CXX11_LAMBDA)
include_directories(${INCLUDE_PATH}/)

#add_subdirectory(${CMAKE_SOURCE_DIR}/The-Modern-Cpp-Challenge/libs/cryptopp)


find_package(Threads REQUIRED)

add_executable(problem1 problem1.cpp)
add_executable(problem2 problem2.cpp)
add_executable(problem15 problem15.cpp)
add_executable(problem16 problem16.cpp)
add_executable(problem17 problem17.cpp)
add_executable(problem18 problem18.cpp)
add_executable(problem19 problem19.cpp)
# add_executable(problem20 problem20.cpp) ##cannot build for find function.
add_executable(problem22 problem22.cpp)
add_executable(problem23 problem23.cpp)
add_executable(problem24 problem24.cpp)
add_executable(problem25 problem25.cpp)
add_executable(problem26 problem26.cpp)
add_executable(problem27 problem27.cpp)
add_executable(problem28 problem28.cpp)
add_executable(problem29 problem29.cpp)
add_executable(problem30 problem30.cpp)
add_executable(problem31 problem31.cpp)
add_executable(problem32 problem32.cpp)
add_executable(problem33 problem33.cpp)
add_executable(problem34 problem34.cpp)
add_executable(problem35 problem35.cpp)
add_executable(problem36 problem36.cpp)
add_executable(problem37 problem37.cpp)
add_executable(problem38 problem38.cpp)
add_executable(problem39 problem39.cpp)
add_executable(problem40 problem40.cpp)
add_executable(problem41 problem41.cpp)
add_executable(problem42 problem42.cpp)
add_executable(problem45 problem45.cpp)
add_executable(problem46 problem46.cpp)
add_executable(problem51 problem51.cpp)
add_executable(problem57 problem57.cpp)
add_executable(problem58 problem58.cpp)
add_executable(problem61 problem61.cpp)
add_executable(problem62 problem62.cpp)
add_executable(problem63 problem63.cpp)
add_executable(problem64 problem64.cpp)
add_executable(problem65 problem65.cpp)
add_executable(problem66 problem66.cpp)
add_executable(problem67 problem67.cpp)
add_executable(problem68 problem68.cpp)
add_executable(problem69 problem69.cpp)
add_executable(problem70 problem70.cpp)
add_executable(problem71 problem71.cpp)
add_executable(problem73 ${LIBS_PATH}/pugixml/pugixml.cpp problem73.cpp)
add_executable(problem74 ${LIBS_PATH}/pugixml/pugixml.cpp problem74.cpp)
add_executable(problem75 problem75.cpp)
add_executable(problem76 problem76.cpp)
add_executable(problem85 ${LIBS_PATH}/sqlite/sqlite3.c problem85.cpp)
#add_executable(problem91 problem91.cpp)
#add_executable(problem92 problem92.cpp)
#add_executable(problem93 problem93.cpp)
add_executable(problem96s problem96s.cpp)
add_executable(problem96c problem96c.cpp)

target_link_libraries(problem61 PRIVATE Threads::Threads)
target_link_libraries(problem62 PRIVATE Threads::Threads)
target_link_libraries(problem63 PRIVATE Threads::Threads)
target_link_libraries(problem64 PRIVATE Threads::Threads)
target_link_libraries(problem65 PRIVATE Threads::Threads)
target_link_libraries(problem66 PRIVATE Threads::Threads)
target_link_libraries(problem85 PRIVATE Threads::Threads)
target_link_libraries(problem85 PRIVATE dl)
#target_link_libraries(problem91 PRIVATE cryptlib)
#target_link_libraries(problem92 PRIVATE cryptlib)
#target_link_libraries(problem93 PRIVATE cryptlib)
